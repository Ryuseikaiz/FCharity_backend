package fptu.fcharity.controller.manage.organization;

import fptu.fcharity.dto.organization.OrganizationDTO;
import fptu.fcharity.dto.organization.VerificationDocumentDTO;
import fptu.fcharity.entity.OrganizationImage;
import fptu.fcharity.entity.User;

import fptu.fcharity.service.manage.organization.OrganizationImageService;
import fptu.fcharity.service.manage.organization.OrganizationService;
import fptu.fcharity.service.manage.user.UserService;
import fptu.fcharity.utils.constants.OrganizationStatus;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.security.core.Authentication;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.web.bind.annotation.*;

import java.io.IOException;
import java.util.List;
import java.util.Objects;
import java.util.UUID;

@RestController
@RequestMapping("/api")
public class OrganizationRestController {
    private final OrganizationService organizationService;
    private final UserService userService;

    @Autowired
    public OrganizationRestController(OrganizationService organizationService, UserService userService) {
        this.organizationService = organizationService;
        this.userService = userService;
    }

    // L·∫•y danh s√°ch t·∫•t c·∫£ c√°c t·ªï ch·ª©c tri√™n h·ªá th·ªëng ƒë·ªÉ show cho user v√† guest xem
    @GetMapping("/organizations")
    public List<OrganizationDTO> getAllOrganizations() {
        return organizationService.findAll();
    }


    // L·∫•y danh s√°ch c√°c t·ªï ch·ª©c m√† ng∆∞·ªùi ƒëang ƒëƒÉng nh·∫≠p tham gia v·ªõi vai tr√≤ th√†nh vi√™n
    @GetMapping("organizations/joined-organizations")
    public List<OrganizationDTO> getMyOrganizations() {
        return organizationService.getMyOrganizations();
    }

    // L·∫•y danh s√°ch c√°c t·ªï ch·ª©c ch·ªù x√©t duy·ªát ƒë·ªÉ ho·∫°t ƒë·ªông
    @GetMapping("/organizations/admin-review/waiting-for-creation")
    public List<OrganizationDTO> getOrganizationsWaitingForCreation() {
        return organizationService.findAll().stream()
                .filter(organizationDTO -> Objects.equals(organizationDTO.getOrganizationStatus(), OrganizationStatus.PENDING)).toList();
    }

    // L·∫•y danh s√°ch c√°c t·ªï ch·ª©c ch·ªù x√©t duy·ªát ƒë·ªÉ x√≥a
    @GetMapping("/organizations/admin-review/waiting-for-deletion")
    public List<OrganizationDTO> getOrganizationsWaitingForDeletion() {
        return organizationService.findAll().stream()
                .filter(organizationDTO -> Objects.equals(organizationDTO.getOrganizationStatus(), OrganizationStatus.WATINGFORDELETION)).toList();
    }

    // L·∫•y th√¥ng tin c·ªßa m·ªôt t·ªï ch·ª©c c√≥ id nh·∫•t ƒë·ªãnh
    @GetMapping("/organizations/{organizationId}")
    public OrganizationDTO getOrganizationById(@PathVariable UUID organizationId) {
        System.out.println("Get organization by id: " + organizationId);
        return organizationService.findById(organizationId);
    }

    // T·∫°o m·ªõi t·ªï ch·ª©c cho ng∆∞·ªùi ƒëang ƒëang nh·∫≠p
    @PostMapping("/organizations")  // OK
    public OrganizationDTO postOrganization(@RequestBody OrganizationDTO organizationDTO) throws IOException {
        System.out.println("ü§ñü§ñü§ñcreating organization: " + organizationDTO);
        return organizationService.createOrganization(organizationDTO);
    }

    // C·∫≠p nh·∫≠t th√¥ng tin cho t·ªï ch·ª©c
    @PutMapping("/organizations")   // OK
    public OrganizationDTO putOrganization(@RequestBody OrganizationDTO organizationDTO) throws IOException {
        OrganizationDTO result = organizationService.updateOrganization(organizationDTO);
        System.out.println("üçéüçéUpdate organization: " + result);
        return result;
    }

    // X√≥a (v√¥ hi·ªáu h√≥a) t·ªï ch·ª©c v√† ch·ªù Admin ph√™ duy·ªát
    @DeleteMapping("/organizations/{organizationId}")
    public UUID deleteOrganization(@PathVariable UUID organizationId) {
        organizationService.deleteOrganizationByCeo(organizationId);
        return organizationId;
    }

    // X√≥a t·ªï ch·ª©c do Admin th·ª±c hi·ªán
    @DeleteMapping("/organizations/admin-review/{organizationId}")
    public UUID deleteOrganizationByAdmin(@PathVariable UUID organizationId) {
        organizationService.deleteOrganizationByAdmin(organizationId);
        return organizationId;
    }

    // L·∫•y th√¥ng tin t·ªï ch·ª©c do ng∆∞·ªùi ƒëang ƒëƒÉng nh·∫≠p l√†m Ceo
    @GetMapping("/organization/managedByCeo")
    public ResponseEntity<OrganizationDTO> getManagedOrganizationByCeo() {
        Authentication authentication = SecurityContextHolder.getContext().getAuthentication();
        User currentUser  = userService.findUserByEmail(authentication.getName()); // email

        if (currentUser != null) {
            UUID currentUserId = currentUser.getId();
            OrganizationDTO organization = organizationService.getOrganizationByCeoId(currentUserId);
            System.out.println("ü¶î organizations: " + organization);
            if (organization == null) {
                return ResponseEntity.status(HttpStatus.UNAUTHORIZED).build();
            }
            return ResponseEntity.ok(organization);
        }

        return ResponseEntity.status(HttpStatus.UNAUTHORIZED).build();
    }

    // L·∫•y danh s√°ch c√°c t·ªï ch·ª©c m√† ng∆∞·ªùi ƒëang ƒëƒÉng nh·∫≠p n·∫Øm vai tr√≤ Manager
    @GetMapping("/organizations/managedByManager")
    public ResponseEntity<List<OrganizationDTO>> getManagedOrganizationsByManager() {
        Authentication authentication = SecurityContextHolder.getContext().getAuthentication();
        User currentUser  = userService.findUserByEmail(authentication.getName()); // email

        if (currentUser != null) {
            UUID currentUserId = currentUser.getId();
            List<OrganizationDTO> organizations = organizationService.getOrganizationsByManagerId(currentUserId);
            System.out.println("ü¶î organizations: " + organizations);
            if (organizations == null) {
                return ResponseEntity.status(HttpStatus.UNAUTHORIZED).build();
            }
            return ResponseEntity.ok(organizations);
        }

        return ResponseEntity.status(HttpStatus.UNAUTHORIZED).build();
    }
}